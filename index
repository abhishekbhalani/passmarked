#!/usr/bin/env node

function displayResults(err, res) {
  if (!res.results.score) {
    process.emit('log:error', [_.r_bg(' ✔ passmarked.com: '), 'results not yet available']);
  } else if (args.output) {
    log.write(args.json ? (
      args.pretty ? JSON.stringify(res, null, '\t') : JSON.stringify(res)
    ) : res.address + ': ' + res.results.score + '\n');
  } else if (args.json) {
    console.log(args.pretty ? JSON.stringify(res, null, '\t') : JSON.stringify(res));
  } else if (res.results.score >= 90) {
    console.log(_.inv(' ✔ passmarked-cli: '), res.address, _.g_bg(res.results.score));
  } else if (res.results.score >= 75) {
    console.log(_.inv(' ✔ passmarked-cli: '), res.address, _.y_bg(res.results.score));
  } else {
    console.log(_.inv(' ✔ passmarked-cli: '), res.address, _.r_bg(res.results.score));
  }
}

function start(addresses) {
  for (var address in addresses) {
    validate(addresses[address], passmarked.query.bind(
      passmarked, addresses[address], displayResults)
    );
  }
}

var _           = require('./lib/colours');
var log         = require('./lib/log');
var pkg         = require('./package.json');
var args        = require('./lib/argv');
var stdin       = require('./lib/stdin');
var validate    = require('./lib/validate');
var passmarked  = require('./lib/passmarked');

var exitCode;

process.on('log:error', function(err) {
  console.error(err.join(' '));
  exitCode = 1;
}).on('beforeExit', function() {
  if (exitCode > 0) process.exit(exitCode);
});

(function() {
  'use strict';
  if (args.version) {
    console.log(_.inv(' ✔ passmarked-cli (version ' + pkg.version + ') '));
  } else if (!(args._[0] || args.address)) {
    stdin.read(start);
  } else {
    start([args._[0] || args.address]);
  }
}).call(this);
